{"version":3,"sources":["../../src/controller/account.js"],"names":["email","require","config","db","api","post","req","res","register","username","body","userType","password","err","account","send","authenticate","session","sendWelcomeEmail","json","message","scope","get","logout","status","user","findById","params","id","accnt","newStore","name","address","geometry","coordinates","lat","long","storePhoneNumber","about","comments","save","store","stores","push","storeID","_id","console","log","newUser","userName","uEmail","uPwd","uAddress","uPhoneNumber","uProfilePic","accounts","users","userID"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AAFA,IAAIA,QAAQC,QAAQ,6BAAR,CAAZ;;AAIA;;kBAEe,gBAAmB;AAAA,MAAhBC,MAAgB,QAAhBA,MAAgB;AAAA,MAARC,EAAQ,QAARA,EAAQ;;AAChC,MAAIC,MAAM,sBAAV;;AAEA;AACAA,MAAIC,IAAJ,CAAS,WAAT,EAAsB,UAACC,GAAD,EAAKC,GAAL,EAAY;AAChC,sBAAQC,QAAR,CAAiB,sBAAY;AAC3BC,gBAAUH,IAAII,IAAJ,CAASV,KADQ;AAE3BW,gBAAUL,IAAII,IAAJ,CAASC;AAFQ,KAAZ,CAAjB,EAGIL,IAAII,IAAJ,CAASE,QAHb,EAGuB,UAASC,GAAT,EAAcC,OAAd,EAAsB;AAC3C,UAAGD,GAAH,EAAO;AACLN,YAAIQ,IAAJ,CAASF,GAAT;AACD;AACD,yBAASG,YAAT,CACE,OADF,EACU;AACNC,iBAAS;AADH,OADV,EAGKX,GAHL,EAGUC,GAHV,EAGe,YAAM;AACjBP,cAAMkB,gBAAN,CAAuB,cAAvB,EAAsCZ,IAAII,IAAJ,CAASV,KAA/C;AACAO,YAAIY,IAAJ,CAAS,EAACC,SAAQ,8BAAT,EAAT;AACD,OANH;AAOD,KAdD;AAeA;AACD,GAjBD;;AAmBA;AACAhB,MAAIC,IAAJ,CAAS,QAAT,EAAmB,mBAASW,YAAT,CACjB,OADiB,EACT;AACNC,aAAS,KADH;AAENI,WAAO;AAFD,GADS,CAAnB;;AAMA;AACAjB,MAAIkB,GAAJ,CAAQ,SAAR,gCAAiC,UAAChB,GAAD,EAAMC,GAAN,EAAc;AAC7CD,QAAIiB,MAAJ;AACAhB,QAAIiB,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB,EAACC,SAAS,iBAAV,EAArB;AACD,GAHD;;AAKAhB,MAAIkB,GAAJ,CAAQ,KAAR,gCAA6B,UAAChB,GAAD,EAAKC,GAAL,EAAW;AACtCA,QAAIiB,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqBb,IAAImB,IAAzB;AACD,GAFD;;AAIA;AACArB,MAAIC,IAAJ,CAAS,gBAAT,gCAAyC,UAACC,GAAD,EAAMC,GAAN,EAAY;AACnD,sBAAQmB,QAAR,CAAiBpB,IAAIqB,MAAJ,CAAWC,EAA5B,EAAgC,UAACf,GAAD,EAAMgB,KAAN,EAAc;AAC5C,UAAGhB,GAAH,EAAO;AACLN,YAAIQ,IAAJ,CAASF,GAAT;AACD;;AAED,UAAIiB,WAAW,qBAAf;AACAA,eAASC,IAAT,GAAgBzB,IAAII,IAAJ,CAASqB,IAAzB;AACAD,eAASE,OAAT,GAAmB1B,IAAII,IAAJ,CAASsB,OAA5B;AACAF,eAASG,QAAT,CAAkBC,WAAlB,CAA8BC,GAA9B,GAAoC7B,IAAII,IAAJ,CAASuB,QAAT,CAAkBC,WAAlB,CAA8BC,GAAlE;AACAL,eAASG,QAAT,CAAkBC,WAAlB,CAA8BE,IAA9B,GAAqC9B,IAAII,IAAJ,CAASuB,QAAT,CAAkBC,WAAlB,CAA8BE,IAAnE;AACAN,eAASO,gBAAT,GAA4B/B,IAAII,IAAJ,CAAS2B,gBAArC;AACAP,eAASQ,KAAT,GAAiBhC,IAAII,IAAJ,CAAS4B,KAA1B;AACAR,eAASS,QAAT,GAAoBjC,IAAII,IAAJ,CAAS6B,QAA7B;AACAT,eAASN,MAAT,GAAkBlB,IAAII,IAAJ,CAASc,MAA3B;;AAEAM,eAASU,IAAT,CAAc,UAAC3B,GAAD,EAAK4B,KAAL,EAAa;AACzB,YAAG5B,GAAH,EAAO;AACLN,cAAIQ,IAAJ,CAASF,GAAT;AACD;AACDgB,cAAMa,MAAN,CAAaC,IAAb,CAAkBb,QAAlB;AACAD,cAAMW,IAAN,CAAW,eAAO;AAChB,cAAG3B,GAAH,EAAO;AACLN,gBAAIQ,IAAJ,CAASF,GAAT;AACD;AACFN,cAAIY,IAAJ,CAAS,EAACC,SAAS,2BAAV,EAAsCwB,SAAQd,SAASe,GAAvD,EAAT;AACA,SALD;AAMD,OAXD;AAYD,KA3BD;AA4BD,GA7BD;;AA+BA;AACAzC,MAAIC,IAAJ,CAAS,eAAT,gCAAuC,UAACC,GAAD,EAAMC,GAAN,EAAY;AACjD,sBAAQmB,QAAR,CAAiBpB,IAAIqB,MAAJ,CAAWC,EAA5B,EAAgC,UAACf,GAAD,EAAMgB,KAAN,EAAc;AAC5C,UAAGhB,GAAH,EAAO;AACLN,YAAIQ,IAAJ,CAASF,GAAT;AACD;AACDiC,cAAQC,GAAR,CAAYlB,KAAZ;AACA,UAAImB,UAAU,oBAAd;AACAA,cAAQC,QAAR,GAAmB3C,IAAII,IAAJ,CAASuC,QAA5B;AACAD,cAAQE,MAAR,GAAiBrB,MAAMpB,QAAvB;AACAuC,cAAQG,IAAR,GAAe7C,IAAII,IAAJ,CAASyC,IAAxB,CAR4C,CAQf;AAC7BH,cAAQI,QAAR,GAAmB9C,IAAII,IAAJ,CAAS0C,QAA5B;AACAJ,cAAQK,YAAR,GAAuB/C,IAAII,IAAJ,CAAS2C,YAAhC;AACAL,cAAQM,WAAR,GAAsBhD,IAAII,IAAJ,CAAS4C,WAA/B;AACAN,cAAQrC,QAAR,GAAmBkB,MAAMlB,QAAzB;AACAqC,cAAQO,QAAR,GAAmB1B,MAAMgB,GAAzB;;AAEAG,cAAQR,IAAR,CAAa,UAAC3B,GAAD,EAAMY,IAAN,EAAc;AACzB,YAAGZ,GAAH,EAAO;AACLN,cAAIQ,IAAJ,CAASF,GAAT;AACD;AACDgB,cAAM2B,KAAN,CAAYb,IAAZ,CAAiBK,OAAjB;AACAnB,cAAMW,IAAN,CAAW,eAAO;AAChB,cAAG3B,GAAH,EAAO;AACLN,gBAAIQ,IAAJ,CAASF,GAAT;AACD;AACD;AACDN,cAAIY,IAAJ,CAAS,EAACC,SAAS,2BAAV,EAAsCqC,QAAOT,QAAQH,GAArD,EAAT;AACA,SAND;AAOD,OAZD;AAaD,KA5BD;AA6BD,GA9BD;AA+BA,SAAOzC,GAAP;AACD,C","file":"account.js","sourcesContent":["import mongoose from 'mongoose';\nimport {Router} from 'express';\nimport Account from '../model/account';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport config from '../config';\nimport User from '../model/user';\nimport Store from '../model/store';\nvar email = require('../middleware/emailServices');\n\nimport {generateAccessToken, respond, authenticate} from '../middleware/authMiddleware';\n\n//import {sendWelcomeEmail} from '../middleware/emailServices';\n\nexport default ({ config, db}) => {\n  let api = Router();\n\n  // 'v1/account'\n  api.post('/register', (req,res)=> {\n    Account.register(new Account({\n      username: req.body.email,\n      userType: req.body.userType\n    }), req.body.password, function(err, account){\n      if(err){\n        res.send(err);\n      }\n      passport.authenticate(\n        'local',{\n          session: false\n        })(req, res, () => {\n          email.sendWelcomeEmail('Sawappy user',req.body.email);\n          res.json({message:'Successfully account created'});\n        });\n    });\n    //console.log('ðŸ˜“'+email.sendWelcomeEmail());\n  });\n\n  // 'v1/account/login'\n  api.post('/login', passport.authenticate(\n    'local',{\n      session: false,\n      scope: []\n    }), generateAccessToken, respond);\n\n  // 'v1/account/logout'\n  api.get('/logout', authenticate, (req, res) => {\n    req.logout();\n    res.status(200).json({message: 'User logged out'});\n  });\n\n  api.get('/me', authenticate, (req,res)=>{\n    res.status(200).json(req.user);\n  });\n\n  //add an store to an specific account id 'v1/account/store/add/:id\n  api.post('/store/add/:id', authenticate, (req, res)=>{\n    Account.findById(req.params.id, (err, accnt)=>{\n      if(err){\n        res.send(err);\n      }\n\n      let newStore = new Store();\n      newStore.name = req.body.name;\n      newStore.address = req.body.address;\n      newStore.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n      newStore.geometry.coordinates.long = req.body.geometry.coordinates.long;\n      newStore.storePhoneNumber = req.body.storePhoneNumber;\n      newStore.about = req.body.about;\n      newStore.comments = req.body.comments;\n      newStore.status = req.body.status;\n\n      newStore.save((err,store)=>{\n        if(err){\n          res.send(err);\n        }\n        accnt.stores.push(newStore);\n        accnt.save(err => {\n          if(err){\n            res.send(err);\n          }\n         res.json({message: 'Account linked to a store',storeID:newStore._id});\n        });\n      });\n    });\n  });\n\n  //add a user to an specific account id 'v1/account/user/add/:id'\n  api.post('/user/add/:id', authenticate,(req, res)=>{\n    Account.findById(req.params.id, (err, accnt)=>{\n      if(err){\n        res.send(err);\n      }\n      console.log(accnt);\n      let newUser = new User();\n      newUser.userName = req.body.userName;\n      newUser.uEmail = accnt.username;\n      newUser.uPwd = req.body.uPwd;//tests\n      newUser.uAddress = req.body.uAddress;\n      newUser.uPhoneNumber = req.body.uPhoneNumber;\n      newUser.uProfilePic = req.body.uProfilePic;\n      newUser.userType = accnt.userType;\n      newUser.accounts = accnt._id;\n\n      newUser.save((err, user) =>{\n        if(err){\n          res.send(err);\n        }\n        accnt.users.push(newUser);\n        accnt.save(err => {\n          if(err){\n            res.send(err);\n          }\n          //console.log(newUser);\n         res.json({message: 'Account linked to an user',userID:newUser._id});\n        });\n      });\n    });\n  });\n  return api;\n}\n"]}